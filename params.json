{
  "name": "Touchstone",
  "tagline": "Testing for Infrastructure w.r.t Storage",
  "body": "# TOUCHSTONE\r\n\r\n- Thoughts on testing practices\r\n- Ideas and implementation or reuse of best fit libraries for automation\r\n\r\n### Need for a Test Automation\r\n\r\n- It has been a desire to achieve test automation so that a developer can \r\n  - make continuous changes to the code base without impacting any existing feature.\r\n- However, can this be simple to use ?\r\n  - Easy enough for a non-technical person to add/modify the test routines\r\n  - The resource need not spend hours to do so\r\n  - Resource may imply a QA engineer, Business Analyst, or an admin.\r\n- It will be great to run the test cases from one's laptop, \r\n  - These would be fine tuned & later be moved to some build setups.\r\n  - Emphasis is given to the environment that is running the tests.\r\n- To summarize, it will be good to have test automation that can be \r\n  - easy to develop, \r\n  - easy to run, & \r\n  - easy to set up in different environments.\r\n \r\n### What kind of Test Automation should we implement ?\r\n\r\nLet me quote an email from OpenStack forums: \r\n>**\"** If a method is conceivably testable with unit tests (without over relying on mock), \r\n>that is preferable. Failing that, functional tests are the way to go. \r\n>The general idea is to test bottom up: \r\n>+    Lots of unit tests,\r\n>+    fewer functional tests,\r\n>+    fewer API/integration/fullstack tests,\r\n>\r\n>It is difficult to test the agent with unit tests effectively, \r\n>which is why I encourage developers to test via functional, mock-less tests. **\"**\r\n\r\nThis is another quote from James Strachan's Weblog - Friday Aug 29, 2003\r\n\r\n>**\"**\r\n>I'm finding that most time spent in a TDD style development model is \r\n>+ coding the unit tests. \r\n>\r\n>There's typically lots of unit test code for little application code. \r\n>Also there does seem to be some baggage when writing unit tests in java. \r\n>This seems a great opportunity for using a concise & powerful dynamically typed language. \r\n>**\"**\r\n\r\n#### Lets think about the issues faced to implement above strategies:\r\n+ Brittle unit tests\r\n+ No end to writing unit tests\r\n\r\n#### Solutions the mitigate these issues:\r\n+ Wide variety of tools make writing unit testing a breeze.\r\n  + e.g. property based testing via [scalacheck](http://www.scalacheck.org/)\r\n  + e.g. data driven testing via [spock](http://spockframework.github.io/spock/docs/)\r\n+ Writing code using functional ways\r\n  + e.g. one may write java or python code thinking of functional constructs\r\n  + e.g. java has java.util.function package\r\n  + this reduces the lines of code\r\n  + this in turn reduces the effort spent on writing unit test code\r\n  + remember less code implies less bugs\r\n  + leads to unit tests without 'mocks' \r\n  + leads to running tests locally that are more closer to production environment.\r\n+ Use of IDEs\r\n+ Use of static tools for linting the code\r\n  + these will help us find out a lot of bugs during code itself\r\n+ Use of functional languages\r\n  + these requires a significant leap of faith\r\n  + if we do manage this the benefits are plenty\r\n  + we end up writing clear, concise, better intent, readable & testable code\r\n  + source code as well as unit test code is not longer brittle\r\n  + this approach defintely tackles bugs & issues in a proactive manner\r\n\r\n### Evolution of Test Automation:\r\n\r\n- It will be great if the test automation can eventually be used to inject faults & check if the system is resilient.\r\n- The fault injection test cases can be based out of the source code design as well as based on faults in the overall environment.\r\n- It is assumed that dedicated engineering thought process needs to go behind designing & building fault injection test cases.\r\n \r\n### Functional & Integration Test Automation\r\n\r\n- Since a typical management layer is exposed via the REST layer, we can get code coverage of ~70% by utilizing the REST layer.\r\n- Given the 80:20 rule, and above justification, we should be spending most of our efforts into functional testing.\r\n- Hence, we need to think about various teams making a contribution towards this automated functional testing.\r\n- If the REST uses JSON, we might get tempted towards use of JavaScript libraries.\r\n- However, every programming language has made use of JSON a breeze.\r\n- We should be looking into libraries or languages that are less verbose & are more DSL (Domain Specific Language) friendly.\r\n- Not only the Developer but also the Business Analyst, Quality Analyst, Infra Engineer, Support Engineer etc. should be able to create a automated functional test case with ease.\r\n\r\n \r\n### Fault Injection Testing & Unit Testing the ElastiCenter\r\n\r\n- While testing the storage via REST layer seems to solve 70% of use cases, we need to think of an alternative design that can test the rest 30%\r\n- Spock is assumed to meet the fault injection requirements w.r.t ElastiCenter that is Java based.\r\n- Below are some of things that we need to try using Spock in order to inject faults:\r\n- Change the behavior at runtime\r\n- Run the Spock specs programmatically against any running EC environment.\r\n- Ability to run specific Spock specs\r\n- Ability to build jars that contains the Spock specs. These jars will be deployed in a running EC & test cases would be invoked from a CLI.\r\n- One is not limited to use Spock. One may think of using various Mock libraries to meet one's goal.\r\n\r\n### Touchston's Sub-Projects\r\n- touchstone\r\n\t- DSL wrapper over CLI\r\n- resto\r\n\t- DSL wrapper over REST API\r\n- automaton\r\n    - TAP based automation that takes into account above\r\n- 3rd party libraries\r\n    - https://github.com/openzfs/openzfs/tree/master/usr/src/test\r\n    - openstack temptest suite\r\n    - vmware certification\r\n\r\n### References\r\n\r\n- https://github.com/vlucas/frisby\r\n- https://github.com/jeffbski/bench-rest\r\n- https://dzone.com/articles/you-cant-test-all-the-things-api-iot-roi-tbd?utm_content=bufferbf217&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer\r\n- https://wiki.freebsd.org/SummerOfCodeIdeas#TEST-o-steron_for_FreeBSD_.28node.js.2FLua.29\r\n- http://www.lingua-systems.com/unit-testing/\r\n- https://github.com/spockframework/spock\r\n- https://github.com/openzfs/openzfs/tree/master/usr/src/test\r\n- http://www.slideshare.net/araujobsd/functional-and-scale-performance-tests-using-zopkio\r\n- https://github.com/linkedin/Zopkio\r\n- https://github.com/zfsonlinux/zfs-auto-snapshot/blob/master/src/zfs-auto-snapshot.sh\r\n\r\n##### Shell Scripting Using Groovy\r\n\r\n- #!/usr/bin/env groovy\r\n- Say bye to cumbersome bash scripts (smile)\r\n- https://github.com/aestasit/sshoogr\r\n\r\n##### Modular & file/folder Structure & Coding Standards for Shell Scripts\r\n\r\n- https://github.com/technopagan/adept-jpg-compressor/blob/master/unittests/tests_adept.bats\r\n- https://github.com/aaronroyer/shy/blob/master/test/shy.bats\r\n- https://github.com/technopagan/adept-jpg-compressor/blob/master/adept.sh\r\n- http://www.doublecloud.org/2015/05/vmware-esxi-esxcli-command-a-quick-tutorial/\r\n\r\n##### Management Tool for Shell\r\n\r\n- https://github.com/aaronroyer/shy \r\n- https://blog.engineyard.com/2014/bats-test-command-line-tools\r\n- https://github.com/sstephenson/bats\r\n- http://stackoverflow.com/questions/687948/timeout-a-command-in-bash-without-unnecessary-delay\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}